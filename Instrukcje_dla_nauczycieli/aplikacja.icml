<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?aid style="50" type="snippet" readerVersion="6.0" featureSet="513" product="8.0(370)" ?>
<?aid SnippetType="InCopyInterchange"?>
<Document DOMVersion="8.0" Self="pandoc_doc">
    <RootCharacterStyleGroup Self="pandoc_character_styles">
      <CharacterStyle Self="$ID/NormalCharacterStyle" Name="Default" />
      <CharacterStyle Self="CharacterStyle/" Name="">
        <Properties>
          <BasedOn type="object">$ID/NormalCharacterStyle</BasedOn>
        </Properties>
      </CharacterStyle>
      <CharacterStyle Self="CharacterStyle/Italic" Name="Italic" FontStyle="Italic">
        <Properties>
          <BasedOn type="object">$ID/NormalCharacterStyle</BasedOn>
        </Properties>
      </CharacterStyle> 
    </RootCharacterStyleGroup>
    <RootParagraphStyleGroup Self="pandoc_paragraph_styles">
      <ParagraphStyle Self="$ID/NormalParagraphStyle" Name="$ID/NormalParagraphStyle"
          SpaceBefore="6" SpaceAfter="6"> <!-- paragraph spacing -->
        <Properties>
          <TabList type="list">
            <ListItem type="record">
              <Alignment type="enumeration">LeftAlign</Alignment>
              <AlignmentCharacter type="string">.</AlignmentCharacter>
              <Leader type="string"></Leader>
              <Position type="unit">10</Position> <!-- first tab stop -->
            </ListItem>
          </TabList>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/CodeBlock" Name="CodeBlock" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
          <AppliedFont type="string">Courier New</AppliedFont>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Header2" Name="Header2" LeftIndent="0" PointSize="30">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle>
      <ParagraphStyle Self="ParagraphStyle/Paragraph" Name="Paragraph" LeftIndent="0">
        <Properties>
          <BasedOn type="object">$ID/NormalParagraphStyle</BasedOn>
        </Properties>
      </ParagraphStyle> 
    </RootParagraphStyleGroup>
    <RootTableStyleGroup Self="pandoc_table_styles">
      <TableStyle Self="TableStyle/Table" Name="Table" />
    </RootTableStyleGroup>
    <RootCellStyleGroup Self="pandoc_cell_styles">
      <CellStyle Self="CellStyle/Cell" AppliedParagraphStyle="ParagraphStyle/$ID/[No paragraph style]" Name="Cell" />
    </RootCellStyleGroup>
  <Story Self="pandoc_story"
      TrackChanges="false"
      StoryTitle=""
      AppliedTOCStyle="n"
      AppliedNamedGrid="n" >
    <StoryPreference OpticalMarginAlignment="true" OpticalMarginSize="12" />

<!-- body needs to be non-indented, otherwise code blocks are indented too far -->
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Header2">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Przykładowy kod pełnej aplikacji:</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/CodeBlock">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content># Dodanie do repozytorium pracy z aplikacją PySimpleGUI i `Commit/Push` a37
# uwaga na ilość uruchomień: 100 request ogólnie, później:
# {'error': {'code': 'usage_limit_reached', 'message': 'Your monthly usage limit has been reached. Please upgrade your Subscription Plan.'}}
# wczytujemy niezbędne elementy
import sys
import requests
import PySimpleGUI as sg
from time import sleep


def get_flight_information(api_key: str):
    returned_text = &quot;No planes data.&quot;

    params = {
        'access_key': api_key,
        'flight_status': 'active',
    }

    data_get = requests.get(
        f&quot;http://api.aviationstack.com/v1/flights&quot;, params)
    data_json = data_get.json()

    # sprawdzamy, czy nie pojawia się jakiś błąd
    if &quot;error&quot; in data_json:
        return data_json[&quot;error&quot;][&quot;message&quot;]

    # jeśli błędnie podamy api_key
    if data_get.status_code == 401:
        return data_json[&quot;error&quot;][&quot;message&quot;]

    # dane o lotach — w wersji FREE 100 rekordów
    flights = data_json[&quot;data&quot;]
    if flights:
        returned_text = &quot;Data for flights: \n&quot;
        for flight_info in flights:
            output_line = &quot;&quot;
            airline = flight_info[&quot;airline&quot;]
            flight = flight_info[&quot;flight&quot;]
            departure = flight_info[&quot;departure&quot;]
            arrival = flight_info[&quot;arrival&quot;]
            live = flight_info[&quot;live&quot;]  # dostępne tylko dla części lotów

            output_line += f&quot;Flight number {flight['iata']} by {airline['name']} - from {departure['airport']} to {arrival['airport']}\n&quot;
            if live:
                output_line += f&quot;On {live['altitude']} meters with {live['speed_horizontal']} km/h.\n&quot;

            output_line += &quot;----------------------------------------------------------------------\n&quot;
            returned_text += output_line

    return returned_text


# definiujemy wygląd aplikacji
app_layout = [
    [sg.Text(&quot;Please enter API KEY&quot;), sg.Input(&quot;api_key&quot;), sg.Button(&quot;Check today's flights&quot;)],
    [sg.Text(&quot;_&quot; * 100)],
    [sg.Output(size=(100, 40), key=&quot;-OUTPUT-&quot;)],
    [sg.Button(&quot;Clear -OUTPUT-&quot;), sg.Exit()],
]
window = sg.Window(&quot;Checking planes in air.&quot;, app_layout, enable_close_attempted_event=True)
# używamy pętli nieskończonej, która działa aż do słowa kluczowego `break`
# pamiętajmy o PEP-8, wcięciach i bloku kodu - https://www.python.org/dev/peps/pep-0008/#indentation
while True:
    # poniższe wywołanie otwiera okno i wczytuje dane
    event, values = window.read()
    # inny sposób sprawdzania - tu x nie spowoduje zniknięcia okna
    if event in (sg.WINDOW_CLOSE_ATTEMPTED_EVENT, &quot;Exit&quot;) and sg.popup_yes_no('Do you really want to exit?') == 'Yes':
        print(&quot;Break and EXIT&quot;)
        break

    # dodajemy sprawdzenie wciśniętego przycisku
    if event == &quot;Check today's flights&quot;:
        # sprawdzamy lot
        print(&quot;Checking....&quot;)
        api_key = values[0]
        plane_info = get_flight_information(api_key)
        print(plane_info)

    # sprawdzamy naciśnięte przyciski
    if event == &quot;Clear -OUTPUT-&quot;:
        window['-OUTPUT-'].update(value='')

# koniec programu
window.close()
print(&quot;End of application&quot;)
sys.exit()</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>Jeśli któraś z grup nie będzie w stanie samodzielnie stworzyć kodu, można popowiedziej jej ten kod. Wynikiem będzie aplikacja, która pozwoli pokazać informacje o samolotach </Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Italic">
    <Content>w powietrzu</Content>
  </CharacterStyleRange>
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Content>.</Content>
  </CharacterStyleRange>
</ParagraphStyleRange>
<Br />
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/Paragraph">
  <CharacterStyleRange AppliedCharacterStyle="$ID/NormalCharacterStyle">
    <Rectangle Self="uec" StrokeWeight="0" ItemTransform="1 0 0 1 376 -356.5">
      <Properties>
        <PathGeometry>
          <GeometryPathType PathOpen="false">
            <PathPointArray>
              <PathPointType Anchor="-376 -356.5" LeftDirection="-376 -356.5" RightDirection="-376 -356.5" />
              <PathPointType Anchor="-376 356.5" LeftDirection="-376 356.5" RightDirection="-376 356.5" />
              <PathPointType Anchor="376 356.5" LeftDirection="376 356.5" RightDirection="376 356.5" />
              <PathPointType Anchor="376 -356.5" LeftDirection="376 -356.5" RightDirection="376 -356.5" />
            </PathPointArray>
          </GeometryPathType>
        </PathGeometry>
      </Properties>
      <Image Self="ue6" ItemTransform="1 0 0 1 -376 -356.5">
        <Properties>
          <Profile type="string">
            $ID/Embedded
          </Profile>
        </Properties>
        <Link Self="ueb" LinkResourceURI="file:app_sample.png" />
      </Image>
    </Rectangle>
  </CharacterStyleRange>
</ParagraphStyleRange>

  </Story>
  
</Document>
